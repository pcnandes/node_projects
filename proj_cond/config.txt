1 - CONFIGURAR E INICIAR O AMBIENTE

1.1- Instalando as dependencias
npm install -> instalar as bibliotecas configuradas em package.json (necessário executar no backend e frontend)

1.2- criar arquivo .env copiando o .env.exemple, mas definindo uma senha e as configurações do banco.
Nome do banco proj_cond

1.3- para rodar o backend: nodemon (npm install -g nodemon caso nao esteja instalado) 
O comando carrega o script q está em package.json e roda o js "node ./bin/www"
localhost:3000

1.4- para rodar o frontend: quasar dev
localhost:8080

1.5- Banco de dados MySql 5.7.24
https://dev.mysql.com/downloads/installer/ (escolher Looking for previous GA versions?)
1.5.1-linux usar xampp https://www.apachefriends.org/pt_br/index.html

2 - OQ USO
2.1 - backend
https://nodejs.org/dist/latest-v8.x/docs/api/
https://expressjs.com/pt-br/
https://github.com/expressjs/cors
https://sequelize.readthedocs.io/en/v3/docs/getting-started/

2.3 - frontend
https://br.vuejs.org/
https://quasar-framework.org
https://github.com/axios/axios
https://github.com/monterail/vuelidate
https://vuex.vuejs.org/


3 - ANOTAÇÕES
repositório:
https://github.com/pcnandes/node_projects/tree/master/proj_cond

hospedagem:
https://www.umbler.com/br

referencias:
login
http://www.luiztools.com.br/post/autenticacao-json-web-token-jwt-em-nodejs/
mysql
http://www.luiztools.com.br/post/como-usar-nodejs-mysql/#9


EStudar:
https://medium.com/matheus-rossi/pwa-vue-js-quasar-ac97d775fcca
https://alinex.github.io/2018/01/04/quasar-start.html


4 TESTES
4.1 instalacao dos modulos
npm i mocha chai supertest testdouble request should -D
// para que o mocha aceite ES6
npm install --save-dev babel-register babel-preset-stage-3 babel-preset-env
criar arquivo .babelrc
***ATENCAO** nao preciso usar babel para rodar os testes
chamada para teste compilando com babel
"unit-test": "NODE_ENV=test mocha --opts ./test/unit/config/mocha.opts --require babel-core/register --require babel-polyfill ./test/unit/condominio.test.js"


**** DICAS VUE JS ***
- a reatividade (detecção de mudança e renderização) do vue é sempre de cima para baixo;
- para propagar mudança de baixo para cima usar os eventos;
- não fazer binding (v-model) com as props, somente o que ta no data();
- se passar um objeto com valor de prop, então alterações nos atributos do objeto são propagadas, mas mudar o objeto em si não propaga;
- evitar copiar props para o data(), pq quando o prop mudar no componente pai, ele não vai propagar para o data() do filho, a não ser que voce use watches, mas é ruim fazer dessa maneira

TODO 
ajustar usuario mascarando senha (https://medium.com/@jgrisafe/custom-user-authentication-with-express-sequelize-and-bcrypt-667c4c0edef5)
verificar uso do lodash
VERIFICAR SE FUNCIONA
http://expressjs.com/pt-br/advanced/best-practice-performance.html
npm install compression

passo a passo para acertar o sequelize
https://medium.com/@jgrisafe/custom-user-authentication-with-express-sequelize-and-bcrypt-667c4c0edef5


TODO
- definir senha do usuario como nulo
- colocar o condomínio do login no token e retirar do store

- testar controlar acesso pelo axios.js se voltar um 401 retornar para tela de logon, se 403 dar um restory back
- verificar regras de validação de morador no backend (garantir que apenas o proprio, o sindico do seu condominio e o adm possam alterar)
- criar mensgens de erro padrao no backend
- passar erros de validacao do backend para exibir no frontend
- tratar validacao no frontend
- terminar cadastro de condominio
- testar https://www.npmjs.com/package/vuex-persist
- criar componentes para cada elemento da tela afim de refuzir codigo e embutir comportamento.

Regra para cadastrar usuario
- administrador nao pode estar vinculado a codominio ou unidade
- sindico tem q estar vinculado a um condominio e também pode estar a uma unidade


-Quasar 1.0
TODO
- \router\index verificar se controle de perfil esta funcionando corretamente
